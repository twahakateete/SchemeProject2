
;; KATEETE TWAHA  2018/HDO5/1958U

#lang racket
(require data-science-master)
(require plot)
(require math)
(require json)

;;Reading the data from the project2.json file
(define tweet-reading (port->string(open-input-file "project2.json")))

;;tweet-reading

;;; cleaning the data by removing capitalization, 
;;; punctuation, and then extra spaces

(define tweet-reader-text (string-normalize-spaces
		   (remove-punctuation
		    (string-downcase  tweet-reading))))
 ;;tweet-reader-text

;;; To begin our sentiment analysis, we extract each unique word
;;; and the number of times it occurred in the extracted data
(define wordcount (document->tokens tweet-reader-text ))

;;wordcount

;; Using the nrc lexicon, we can label each (non stop-word) with an
;;; emotional label. 
(define sentiment (list->sentiment wordcount #:lexicon 'nrc))

;;; We can take a sneak peak at the data...
(take sentiment 5)
;;; --> '(("word" "sentiment" "freq")
;;;       ("ship" "anticipation" 367)
;;;       ("sea" "positive" 364)
;;;       ("time" "anticipation" 318)
;;;       ("long" "anticipation" 311))

;;; sentiment, created above, consists of a list of triplets of the pattern
;;; (token sentiment freq) for each token in the document. Many words will have 
;;; the same sentiment label, so we aggregrate (by summing) across such tokens.
(aggregate sum ($ sentiment 'sentiment) ($ sentiment 'freq))
;;; --> '(("anticipation" )
;;;       ("positive" )
;;;       ("joy" )
;;;       ("trust" )
;;;       ("surprise" )
;;;       ("negative" )
;;;       ("fear" )
;;;       ("sadness" )
;;;       ("anger")
;;;       ("disgust"))

;;; Better yet, we can visualize this result as a barplot (discrete-histogram)
(let ([counts (aggregate sum ($ sentiment 'sentiment) ($ sentiment 'freq))])
  (parameterize ((plot-width 800))
    (plot (list
	   (tick-grid)
	   (discrete-histogram
	    (sort counts (λ (x y) (> (second x) (second y))))
	    #:color "Green"
	    #:line-color "MediumSlateBlue"))
	    #:x-label "Affective Label"
	    #:y-label "Frequency")))

;;; i used the bing lexicon to determine the ratio of
;;; positive-to-negative words 
(define x (list->sentiment wordcount #:lexicon 'bing))
(parameterize ([plot-height 200])
  (plot (discrete-histogram
	 (aggregate sum ($ x 'sentiment) ($ x 'freq))
	 #:y-min 0
	 #:y-max 3500
	 #:invert? #t
	 #:color "Red")
	 #:x-label "Frequency"
	 #:y-label "Sentiment Polarity"))

;;; Also used the AFINN lexicon to determine the data's
;;; affective polarity
(define y (list->sentiment wordcount #:lexicon 'AFINN))
(sum (map (λ (x) (* (second x) (third x))) (cdr y)))
